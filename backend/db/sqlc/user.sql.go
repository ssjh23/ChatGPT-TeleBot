// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    chat_id,
    password
) VALUES (
    $1, $2
) RETURNING id, chat_id, password, created_at, password_updated_at
`

type CreateUserParams struct {
	ChatID   string `json:"chatId"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.ChatID, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.Password,
		&i.CreatedAt,
		&i.PasswordUpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users 
WHERE chat_id = $1
RETURNING id, chat_id, password, created_at, password_updated_at
`

func (q *Queries) DeleteUser(ctx context.Context, chatID string) (User, error) {
	row := q.db.QueryRowContext(ctx, deleteUser, chatID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.Password,
		&i.CreatedAt,
		&i.PasswordUpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, chat_id, password, created_at, password_updated_at FROM users
WHERE chat_id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, chatID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, chatID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.Password,
		&i.CreatedAt,
		&i.PasswordUpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, chat_id, password, created_at, password_updated_at FROM users
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.ChatID,
			&i.Password,
			&i.CreatedAt,
			&i.PasswordUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE users 
SET (password, password_updated_at) = ($2, NOW())
WHERE chat_id = $1
RETURNING id, chat_id, password, created_at, password_updated_at
`

type UpdateUserPasswordParams struct {
	ChatID   string `json:"chatId"`
	Password string `json:"password"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserPassword, arg.ChatID, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.Password,
		&i.CreatedAt,
		&i.PasswordUpdatedAt,
	)
	return i, err
}
